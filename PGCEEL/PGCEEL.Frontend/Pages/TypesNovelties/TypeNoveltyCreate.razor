@page "/typesnovelties/create"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


<h3>Crear Tipo de Novedad</h3>

<TypeNoveltyForm @ref="typenoveltyForm" TypeNovelty="typenovelty" OnValidSubmit="CreateAsync" ReturnAction="Return" />

@code {
    private TypeNovelty typenovelty = new();
    private TypeNoveltyForm? typenoveltyForm;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task CreateAsync()
    {
        var response = await repository.PostAsync("/api/typesnovelties", typenovelty);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro creado con exito.");
    }

    private void Return()
    {
        typenoveltyForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/typesnovelties");
    }
}