@page "/typesnovelties/edit/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService


<h3>Editar Tipo de Novedad</h3>

@if (typevovelty is null)
{
    <Loading/>
}
else
{
    <TypeNoveltyForm @ref="typevoveltyForm" TypeNovelty="typevovelty" OnValidSubmit="SaveAsync" ReturnAction="Return" />
}


@code {
    private TypeNovelty? typevovelty;
    private TypeNoveltyForm? typevoveltyForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var response = await repository.GetAsync<TypeNovelty>($"api/typesnovelties/{Id}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Return();
            }

            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;

        }
        typevovelty = response.Response;
    }

    private async Task SaveAsync()
    {
        var response = await repository.PutAsync($"api/typesnovelties", typevovelty);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con exito");
    }

    private void Return()
        {
            typevoveltyForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/typesnovelties");
        }

}
