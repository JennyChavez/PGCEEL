@page "/typesnovelties"
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Tipos de Novedades</h3>

<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div>
        <a class="btn btn-primary" @onclick=@(() => ShowModal())>Nueva Tipo de Novedad</a>
    </div>
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Tipo de Novedad..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
    </div>
</div>

<GenericList MyList="typesnovelties">
    <NoRecords>
        <p>Aun no hay tipo de novedades registrados.</p>
    </NoRecords>

    <Body>
        <Pagination CurrentPage="currentPage"
                    TotalPages="totalPages"
                    SelectedPage="SelectedPageAsync" />
        
        <table class="table table-striped">

            <thead>
                <tr>
                    <th>Tipo de Novedad</th>
                    <th style ="width:140px">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var typenovelty in typesnovelties!)
                {
                    <tr>
                        <td>@typenovelty.Name</td>
                        <td>
                            <a class="btn btn-warning btn-sm" @onclick=@(() => ShowModal(typenovelty.Id, true))>Editar</a>
                            <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(typenovelty))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>


@code {
    private List<TypeNovelty>? typesnovelties;
    private int currentPage = 1;
    private int totalPages;

[CascadingParameter]
IModalService Modal { get; set; } = default!;


    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<TypeNoveltyEdit>(string.Empty, new ModalParameters().Add("TipeNoveltyId", id));
        }
        else
        {
            modalReference = Modal.Show<TypeNoveltyCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }


    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {

        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadListAsync(page);
        if (ok)
        {
            await LoadPagesAsync();
        }
    }

    private async Task LoadPagesAsync()
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/typesnovelties/totalPages";
        }
        else
        {
            url = $"api/typesnovelties/totalPages?filter={Filter}";
        }

        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = response.Response;
    }

    private async Task<bool> LoadListAsync(int page)
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/typesnovelties?page={page}";
        }
        else
        {
            url = $"api/typesnovelties?page={page}&filter={Filter}";
        }

        var response = await repository.GetAsync<List<TypeNovelty>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }

        typesnovelties = response.Response;
        return true;
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task DeleteAsync (TypeNovelty typesnovelties)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres borrar el tipo de novedad: {typesnovelties.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        var response = await repository.DeleteAsync($"api/typesnovelties/{typesnovelties.Id}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        await LoadAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }
    }